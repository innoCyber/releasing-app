apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    signingConfigs {
        Releasing {
            storeFile file(getLocalProperty("KEYSTORE_FILE"))
            storePassword getLocalProperty("KEYSTORE_PASSWORD")
            keyAlias = getLocalProperty("KEYSTORE_KEY_ALIAS")
            keyPassword getLocalProperty("KEYSTORE_KEY_PASSWORD")
        }
    }
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "ptml.releasing"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 31
        versionName "1.4.0"
        testInstrumentationRunner "ptml.releasing.ReleasingTestRunner"
        vectorDrawables.useSupportLibrary true
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions 'server'
    productFlavors {
        dev {
            dimension 'server'
            applicationIdSuffix '.dev'
            versionNameSuffix "-dev-" + getDate()
            versionCode 1
            signingConfig signingConfigs.Releasing
        }

        staging {
            dimension 'server'
            applicationIdSuffix '.staging'
            versionNameSuffix "-staging-" + "-b" + getDate()
            versionCode 6
            signingConfig signingConfigs.Releasing
        }

        production {
            dimension 'server'
            signingConfig signingConfigs.Releasing
        }
    }

    applicationVariants.all { variant ->
        def name = variant.getName()
        //default values
        variant.buildConfigField("String", "IMEI", getLocalProperty("TEST_IMEI"))

        // Specific values
        if (name.contains("dev")) {
            variant.buildConfigField("String", "BASE_URL", getLocalProperty("DEV_BASE_URL"))
            variant.buildConfigField("String", "BASE_AUTH_URL", getLocalProperty("DEV_BASE_AUTH_URL"))
            variant.buildConfigField("String", "BASE_IMAGE_UPLOAD_URL", getLocalProperty("DEV_BASE_URL"))
        } else if (name.contains("staging")) {
            variant.buildConfigField("String", "BASE_URL", "\"https://billing.grimaldi-nigeria.com:1449/api/AndroidZebra/\"")
            variant.buildConfigField("String", "BASE_AUTH_URL", "\"https://billing.grimaldi-nigeria.com:1449/api/AndroidAppDriver/\"")
            variant.buildConfigField("String", "BASE_IMAGE_UPLOAD_URL", "\"https://billing.grimaldi-nigeria.com:1449/api/AndroidZebra/UploadImage/\"")
        } else if (name.contains("production")) {
            variant.buildConfigField("String", "BASE_URL", "\"https://billing.grimaldi-nigeria.com:1448/api/AndroidZebra/\"")
            variant.buildConfigField("String", "BASE_AUTH_URL", "\"https://billing.grimaldi-nigeria.com:1448/api/AndroidAppDriver/\"")
            variant.buildConfigField("String", "BASE_IMAGE_UPLOAD_URL", "\"https://billing.grimaldi-nigeria.com:1449/api/AndroidZebra/UploadImage/\"")
        }
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':form')
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine"

    //Android Kotlin extensions
    implementation 'androidx.core:core-ktx:1.1.0'

    //appcompat
    implementation "androidx.appcompat:appcompat:$supportLibVersion"
    implementation "androidx.vectordrawable:vectordrawable:$supportLibVersion"

    //multidex
    implementation 'androidx.multidex:multidex:2.0.1'

    //constraint
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    //material
    implementation "com.google.android.material:material:$materialLibVersion"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$archComponentsVersion"
    implementation "androidx.lifecycle:lifecycle-runtime:$archComponentsVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archComponentsVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$archComponentsVersion"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpLoggingInterceptorVersion"
//    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofitCoroutine"

    //dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'

    //timber for logging
    implementation "com.jakewharton.timber:timber:$timberVersion"

 /*   //leakcanary for detecting memory leaks
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"*/

    //permissions
    implementation "org.permissionsdispatcher:permissionsdispatcher:$permission_dispatcher"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:$permission_dispatcher"

    //secure shared preferences
    implementation 'com.scottyab:secure-preferences-lib:0.1.7'

    // unit testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation "androidx.test:core:${coreTestVersion}"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"

    //instrumentation testing
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test:runner:$testRunner"
    androidTestImplementation "androidx.test:rules:$testRunner"
    androidTestImplementation "androidx.test.ext:junit:$androidJunit"

    androidTestImplementation "com.google.dagger:dagger:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestImplementation "io.mockk:mockk-android:$mockkVersion"

    //zebra sdk
    implementation files('libs/zebra_android_sdk.jar')

    //barcode scanning
    implementation 'me.dm7.barcodescanner:zbar:1.8.3'


    //firebase
    implementation 'com.google.firebase:firebase-analytics-ktx:17.4.3'
    implementation 'com.google.firebase:firebase-crashlytics:17.1.0'

    //firebase remote config
    implementation 'com.google.firebase:firebase-config:18.0.0'

    //worker
    def workerVersion = "2.3.4"
    implementation "androidx.work:work-runtime-ktx:$workerVersion"
    androidTestImplementation "androidx.work:work-testing:$workerVersion"

    def assistedInjectVersion = "0.5.2"
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assistedInjectVersion"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assistedInjectVersion"

    //IMAGES
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${glideVersion}"

    implementation 'id.zelory:compressor:2.1.0'

    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assistedInjectVersion"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assistedInjectVersion"


    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    implementation "androidx.paging:paging-runtime:$pagingVersion"


    debugImplementation "com.amitshekhar.android:debug-db:1.0.6"

}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

